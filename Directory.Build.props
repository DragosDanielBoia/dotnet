<Project>

  <PropertyGroup>
    <_SuppressSdkImports Condition="'$(DotNetBuildFromSource)' == 'true'">true</_SuppressSdkImports>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <NetCurrent Condition="'$(SkipArcadeSdkImport)' == 'true'">net9.0</NetCurrent>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" Condition="'$(SkipArcadeSdkImport)' != 'true'" />

  <!-- Init basic Arcade props, if the project importing this file doesn't use Arcade. -->
  <PropertyGroup Condition="'$(_SuppressSdkImports)' == 'true' or '$(SkipArcadeSdkImport)' == 'true'">
    <RepoRoot Condition="'$(RepoRoot)' == ''">$([MSBuild]::NormalizeDirectory('$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), 'global.json'))'))</RepoRoot>

    <!-- Respect environment variable for the .NET install directory if set; otherwise, use the repo default location -->
    <DotNetRoot Condition="'$(DOTNET_INSTALL_DIR)' != ''">$(DOTNET_INSTALL_DIR)</DotNetRoot>
    <DotNetRoot Condition="'$(DotNetRoot)' != ''">$([MSBuild]::NormalizeDirectory('$(DotNetRoot)'))</DotNetRoot>
    <DotNetRoot Condition="'$(DotNetRoot)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', '.dotnet'))</DotNetRoot>

    <!-- Let the exec task find dotnet on PATH -->
    <DotNetRoot Condition="!Exists($(DotNetRoot))"/>

    <DotNetTool Condition="'$(OS)' == 'Windows_NT'">$(DotNetRoot)dotnet.exe</DotNetTool>
    <DotNetTool Condition="'$(OS)' != 'Windows_NT'">$(DotNetRoot)dotnet</DotNetTool>

    <ArtifactsDir Condition="'$(ArtifactsDir)' == ''">$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts'))</ArtifactsDir>
    <RepositoryEngineeringDir>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'eng'))</RepositoryEngineeringDir>

    <!-- Keep in sync with NetCurrent in the Arcade.Sdk's TargetFrameworkDefaults.props file. -->
    <NetCurrent>net9.0</NetCurrent>
  </PropertyGroup>

  <!-- Manually import the Versions.props file when the Arcade SDK isn't used. -->
  <Import Project="$(RepositoryEngineeringDir)Versions.props"
          Condition="'$(_SuppressSdkImports)' == 'true' or '$(SkipArcadeSdkImport)' == 'true'" />

  <PropertyGroup>
    <!-- Fake, for SDK. -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <!-- We have no projects targeting multiple frameworks, so don't include in output path. -->
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <!-- This repo's projects are entirely infrastructure and do not ship. -->
    <IsShipping>false</IsShipping>
    <!-- It's not unusual to build with a preview SDK -->
    <SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>
    <!-- Builds from the VMR are by definition vertical builds. -->
    <DotNetBuildVertical Condition="'$(DotNetBuildVertical)' == ''">true</DotNetBuildVertical>
    <!-- By default, the VMR builds with online sources. -->
    <BuildWithOnlineSources Condition="'$(BuildWithOnlineSources)' == ''">true</BuildWithOnlineSources>
  </PropertyGroup>

  <PropertyGroup>
    <BuildArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</BuildArchitecture>
    <Platform Condition="'$(Platform)' == 'AnyCPU'" />
    <Platform Condition="'$(Platform)' == '' AND ('$(BuildArchitecture)' == 'arm64' OR '$(BuildArchitecture)' == 'arm')">$(BuildArchitecture)</Platform>
    <Platform Condition="'$(Platform)' == '' AND '$(BuildArchitecture)' == 's390x'">$(BuildArchitecture)</Platform>
    <Platform Condition="'$(Platform)' == '' AND '$(BuildArchitecture)' == 'ppc64le'">$(BuildArchitecture)</Platform>
    <Platform Condition="'$(Platform)' == '' AND '$(BuildArchitecture)' == 'loongarch64'">$(BuildArchitecture)</Platform>
    <Platform Condition="'$(Platform)' == ''">x64</Platform>

    <TargetPlatform>$(Platform)</TargetPlatform>
    <TargetPlatform Condition="'$(OverrideTargetRid)' != ''">$(OverrideTargetRid.Substring($(OverrideTargetRid.LastIndexOf('-'))).TrimStart('-'))</TargetPlatform>
  </PropertyGroup>

  <PropertyGroup>
    <SubmoduleDirectory>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'src'))</SubmoduleDirectory>
    <ToolsDir>$([MSBuild]::NormalizeDirectory('$(RepositoryEngineeringDir)', 'tools'))</ToolsDir>
    <TasksDir>$([MSBuild]::NormalizeDirectory('$(ToolsDir)', 'tasks'))</TasksDir>
    <PrereqsDir>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'prereqs'))</PrereqsDir>
    <KeysDir>$([MSBuild]::NormalizeDirectory('$(PrereqsDir)', 'keys'))</KeysDir>

    <PrereqsPackagesDir>$(PrereqsDir)/packages/</PrereqsPackagesDir>
    <PackagesDir Condition="'$(NuGetPackageRoot)' != ''">$(NuGetPackageRoot)</PackagesDir>
    <PackagesDir Condition="'$(PackagesDir)' == ''">$(PrereqsPackagesDir)restored/</PackagesDir>
    <!-- When SB mode, the initial arcade is unzipped to a the "ArcadeBootStrap" dir.
         When running in VBPOC, the bootstrap package is the arcade restored at the beginning of the build. -->
    <ArcadeBootstrapPackageDir Condition="'$(DotNetBuildFromSource)' == 'true'">$(PackagesDir)ArcadeBootstrapPackage/</ArcadeBootstrapPackageDir>
    <ArcadeBootstrapPackageDir Condition="'$(DotNetBuildVertical)' == 'true'">$(PackagesDir)</ArcadeBootstrapPackageDir>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      '.proj' has no DefaultLanguageSourceExtension, causing **/* to be collected
      in Compile items! Avoid this by disabling the default items.
    -->
    <EnableDefaultItems Condition="'$(MSBuildProjectExtension)' == '.proj'">false</EnableDefaultItems>

    <LogVerbosity Condition="'$(LogVerbosity)'==''">minimal</LogVerbosity>
    <BuildInParallel Condition="'$(BuildInParallel)'==''">false</BuildInParallel>

    <ShellExtension Condition="'$(OS)' == 'Windows_NT'">.cmd</ShellExtension>
    <ShellExtension Condition="'$(OS)' != 'Windows_NT'">.sh</ShellExtension>
  </PropertyGroup>

  <PropertyGroup>
    <RootRepo>dotnet</RootRepo>

    <BaseOutputPath>$(ArtifactsDir)</BaseOutputPath>
    <BaseIntermediatePath>$([MSBuild]::NormalizeDirectory('$(BaseOutputPath)', 'obj'))</BaseIntermediatePath>
    <OutputPath>$([MSBuild]::NormalizeDirectory('$(BaseOutputPath)', '$(TargetPlatform)', '$(Configuration)'))</OutputPath>
    <IntermediatePath>$([MSBuild]::NormalizeDirectory('$(BaseIntermediatePath)', '$(TargetPlatform)', '$(Configuration)'))</IntermediatePath>

    <LocalNuGetPackagesRoot>$([MSBuild]::NormalizeDirectory('$(IntermediatePath)', 'nuget-packages'))</LocalNuGetPackagesRoot>
    <SourceBuiltBlobFeedDir>$([MSBuild]::NormalizeDirectory('$(IntermediatePath)', 'blob-feed'))</SourceBuiltBlobFeedDir>
    <SourceBuiltPackagesPath>$([MSBuild]::NormalizeDirectory('$(SourceBuiltBlobFeedDir)', 'packages'))</SourceBuiltPackagesPath>

    <SourceBuiltSdksDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'source-built-sdks'))</SourceBuiltSdksDir>

    <SourceBuiltAssetsDir>$(SourceBuiltBlobFeedDir)assets/</SourceBuiltAssetsDir>
    <PrebuiltPackagesPath>$(PrereqsPackagesDir)prebuilt/</PrebuiltPackagesPath>
    <PreviouslyRestoredPackagesPath>$(PrereqsPackagesDir)previouslyRestored/</PreviouslyRestoredPackagesPath>
    <PrebuiltSourceBuiltPackagesPath>$(PrereqsPackagesDir)previously-source-built/</PrebuiltSourceBuiltPackagesPath>
    <PrebuiltSourceBuiltPackagesPath Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' != ''">$(CustomPrebuiltSourceBuiltPackagesPath)/</PrebuiltSourceBuiltPackagesPath>
    <SourceBuiltTarBallPath>$(OutputPath)</SourceBuiltTarBallPath>
    <LoggingDir>$([MSBuild]::NormalizeDirectory('$(BaseOutputPath)', 'logs'))</LoggingDir>
    <MSBuildDebugPathTargetDir>$(BaseOutputPath)msbuild-debug/</MSBuildDebugPathTargetDir>
    <RoslynDebugPathTargetDir>$(BaseOutputPath)roslyn-debug/</RoslynDebugPathTargetDir>
    <AspNetRazorBuildServerLogDir>$(BaseOutputPath)aspnet-debug</AspNetRazorBuildServerLogDir>
    <AspNetRazorBuildServerLogFile>$(AspNetRazorBuildServerLogDir)razor-build-server.log</AspNetRazorBuildServerLogFile>
    <GitInfoDir>$(PrereqsDir)git-info/</GitInfoDir>
    <GitInfoAllRepoPropsFile>$(GitInfoDir)AllRepoVersions.props</GitInfoAllRepoPropsFile>
    <PackageReportDir>$(BaseOutputPath)prebuilt-report/</PackageReportDir>
    <RepoProjectsDir>$(RepoRoot)repo-projects/</RepoProjectsDir>
    <ResultingPrebuiltPackagesDir>$(PackageReportDir)prebuilt-packages/</ResultingPrebuiltPackagesDir>
    <PackageListsDir>$(PackageReportDir)packagelists/</PackageListsDir>
    <!-- The prefix needs to match what's defined in Arcade's source-build infra. Consider using a single property, in the future. -->
    <NonShippingPackagesListPrefix>NonShipping.Packages.</NonShippingPackagesListPrefix>
    <PackageReportDataFile>$(PackageReportDir)prebuilt-usage.xml</PackageReportDataFile>
    <PoisonUsageReportFile>$(PackageReportDir)poison-usage.xml</PoisonUsageReportFile>
    <PoisonReportDataFile>$(PackageReportDir)poison-catalog.xml</PoisonReportDataFile>
    <PoisonMarkerFile>.prebuilt.xml</PoisonMarkerFile>
    <SourceBuiltPoisonReportDataFile>$(PackageReportDir)poison-source-built-catalog.xml</SourceBuiltPoisonReportDataFile>
    <ProjectAssetsJsonArchiveFile>$(PackageReportDir)all-project-assets-json-files.zip</ProjectAssetsJsonArchiveFile>
    <ProdConManifestFile>$(PackageReportDir)prodcon-build.xml</ProdConManifestFile>
    <PoisonedReportFile>$(PackageReportDir)poisoned.txt</PoisonedReportFile>
    <ConflictingPackageReportDir>$(BaseOutputPath)conflict-report/</ConflictingPackageReportDir>
    <PrebuiltBurndownDataFile>$(PackageReportDir)PrebuiltBurndownData.csv</PrebuiltBurndownDataFile>
    <ExternalTarballsDir>$(PrereqsPackagesDir)archive/</ExternalTarballsDir>
    <ReferencePackagesDir>$([MSBuild]::NormalizeDirectory('$(PrereqsPackagesDir)', 'reference'))</ReferencePackagesDir>
    <SourceBuiltArtifactsTarballName>Private.SourceBuilt.Artifacts</SourceBuiltArtifactsTarballName>
    <SourceBuiltPrebuiltsTarballName>Private.SourceBuilt.Prebuilts</SourceBuiltPrebuiltsTarballName>
    <SourceBuiltArtifactsTarballUrl>https://dotnetcli.azureedge.net/source-built-artifacts/assets/</SourceBuiltArtifactsTarballUrl>
    <ArchiveArtifactsTextFileName>archiveArtifacts.txt</ArchiveArtifactsTextFileName>
    <ArchiveArtifactsTextFile>$(ExternalTarballsDir)$(ArchiveArtifactsTextFileName)</ArchiveArtifactsTextFile>
    <BaselineDataFile>$(ToolsDir)prebuilt-baseline.xml</BaselineDataFile>
    <SmokeTestsDir>$(RepoRoot)test/Microsoft.DotNet.SourceBuild.SmokeTests/</SmokeTestsDir>
  </PropertyGroup>

  <!-- Build task paths -->
  <PropertyGroup>
    <XPlatSourceBuildTasksAssembly>$([MSBuild]::NormalizePath('$(TasksDir)', 'Microsoft.DotNet.SourceBuild.Tasks.XPlat', 'bin', '$(Configuration)', 'Microsoft.DotNet.SourceBuild.Tasks.XPlat.dll'))</XPlatSourceBuildTasksAssembly>
    <LeakDetectionTasksAssembly>$([MSBuild]::NormalizePath('$(TasksDir)', 'Microsoft.DotNet.SourceBuild.Tasks.LeakDetection', 'bin', '$(Configuration)', 'Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.dll'))</LeakDetectionTasksAssembly>
  </PropertyGroup>

  <PropertyGroup>
    <ArmEnvironmentVariables Condition="'$(ArmEnvironmentVariables)' == ''">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/arm</ArmEnvironmentVariables>
    <ArmEnvironmentVariables Condition="'$(Platform)' == 'armel'">ROOTFS_DIR=$(BaseIntermediatePath)crossrootfs/armel</ArmEnvironmentVariables>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Use current machine distro RID if set. Otherwise, fall back to RuntimeInformation.RuntimeIdentifier -->
    <TargetRid Condition="'$(TargetRid)' == ''">$(__DistroRid)</TargetRid>
    <TargetRid Condition="'$(TargetRid)' == ''">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</TargetRid>

    <TargetOS Condition="'$(TargetOS)' == '' AND $([MSBuild]::IsOSPlatform('WINDOWS'))">Windows_NT</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == '' AND $([MSBuild]::IsOSPlatform('OSX'))">OSX</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == '' AND $([MSBuild]::IsOSPlatform('LINUX'))">Linux</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == '' AND $([MSBuild]::IsOSPlatform('FREEBSD'))">FreeBSD</TargetOS>

    <PortableRid Condition="'$(__PortableTargetOS)' != ''">$(__PortableTargetOS)-$(TargetPlatform)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' AND '$(TargetOS)' == 'FreeBSD'">freebsd-$(TargetPlatform)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' AND '$(TargetOS)' == 'OSX'">osx-$(TargetPlatform)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' AND '$(TargetOS)' == 'Linux'">linux-$(TargetPlatform)</PortableRid>
    <PortableRid Condition="$(TargetRid.StartsWith('linux-musl')) or $(TargetRid.StartsWith('alpine'))">linux-musl-$(TargetPlatform)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' AND '$(TargetOS)' == 'Windows_NT'">win-$(TargetPlatform)</PortableRid>
    <TargetRid Condition="'$(PortableBuild)' == 'true' AND '$(PortableRid)' != ''">$(PortableRid)</TargetRid>
  </PropertyGroup>

  <!-- CLI internal version is statically set by us to a version that will never show up in the wild.
       This ensures we will never restore a public version instead of our source-built version.  We
       invlude the version number because it is used both by CLI.proj and the core-sdk build and they
       have to be synced up.  ExtraPackageVersionPropsPackageInfo doesn't work in cli.proj because
       toolset is between CLI and core-sdk, and the extra package version info is lost.               -->
  <PropertyGroup>
    <CliInternalReleaseTag>source</CliInternalReleaseTag>
    <CliInternalBuildVersion>30000001-1</CliInternalBuildVersion>
  </PropertyGroup>

  <ItemGroup>
    <ExtraPackageVersionPropsPackageInfo Include="DotnetCliInternalVersion" Version="3.0.100-$(CliInternalReleaseTag)-$(CliInternalBuildVersion)" />
  </ItemGroup>

  <Import Project="$(GitInfoAllRepoPropsFile)" />

  <!-- Additional pseudo-versions that some repos depend on -->
  <ItemGroup>
    <!-- we don't produce the Windows version of this package but that's the one core-sdk keys off of for the ASP.NET version -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimewinx64PackageVersion" Version="$(aspnetcoreOutputPackageVersion)" />
    <!-- same thing here for CLI -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimewinx64Version" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
    <!-- same thing here for toolset -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimewinx64PackageVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
    <!-- same thing here for core-sdk -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimePackageVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppRuntimeVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppHostPackageVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
    <!-- core-sdk uses this property for ASP.NET blob directory -->
    <ExtraPackageVersionPropsPackageInfo Include="VSRedistCommonAspNetCoreTargetingPackx6430PackageVersion" Version="$(aspnetcoreOutputPackageVersion)" />

    <!-- Used by installer to determine sdk version -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftDotnetToolsetInternalPackageVersion" Version="%24(MicrosoftNETSdkPackageVersion)" />

    <!-- Used by sdk to determine msbuild version for fsharp -->
    <ExtraPackageVersionPropsPackageInfo Include="FSharpBuildVersion" Version="%24(MicrosoftBuildPackageVersion)" />

    <!-- property used by Arcade to determine what version of SourceLink to use -->
    <!-- if MicrosoftSourceLinkCommonPackageVersion is non-empty, then we've already built SourceLink, regardless of whether
         this is the production or offline build, so we should use that version.  -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftSourceLinkVersion" Version="%24(MicrosoftSourceLinkCommonPackageVersion)" />

    <!-- non-rid-specific versions of RID-specific version variables to use for bootstrapping -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimeVersion" Version="%24(MicrosoftAspNetCoreAppRefPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppCrossgen2Version" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
  </ItemGroup>

  <PropertyGroup Condition="'$(DotNetBuildFromSource)' == 'true'">
    <!-- While the tarball infrastructure currently only supports non Windows, these properties
         are already defined for more flexibility in the future. -->
    <TarBallExtension Condition="'$(OS)' == 'Windows_NT'">.zip</TarBallExtension>
    <TarBallExtension Condition="'$(OS)' != 'Windows_NT'">.tar.gz</TarBallExtension>
  </PropertyGroup>

</Project>
