<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <Target Name="Build"
          DependsOnTargets="
      UnpackTarballs;
      BuildXPlatTasks;
      BuildMSBuildSdkResolver;
      BuildLeakDetection;
      ExtractToolPackage;
      GenerateRootFs;
      PoisonPrebuiltPackages" />

  <Target Name="UnpackTarballs"
          Condition="'$(DotNetBuildFromSource)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)UnpackTarballs.complete" >
    <MakeDir Directories="$(PrebuiltSourceBuiltPackagesPath)" Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />
    <Exec Command="tar -xzf $(ExternalTarballsDir)$(SourceBuiltArtifactsTarballName).*$(TarBallExtension)"
          WorkingDirectory="$(PrebuiltSourceBuiltPackagesPath)"
          Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />

    <!--
      Check for a prebuilt dependency tarball and extract if exists. If there isn't one, we expect
      the build to be working without prebuilts.
    -->
    <ItemGroup>
      <SourceBuiltPrebuiltsTarballFile Include="$(ExternalTarballsDir)$(SourceBuiltPrebuiltsTarballName).*$(TarBallExtension)" />
    </ItemGroup>
    <Exec Command="tar -xzf %(SourceBuiltPrebuiltsTarballFile.FullPath)"
          WorkingDirectory="$(PrebuiltPackagesPath)"
          Condition="'@(SourceBuiltPrebuiltsTarballFile)' != ''" />

    <!-- Copy SBRP packages to reference packages location -->
    <MakeDir Directories="$(ReferencePackagesDir)" />
    <ItemGroup>
      <UnpackedSourceBuildReferencePackages Include="$(PrebuiltSourceBuiltPackagesPath)SourceBuildReferencePackages/*"/>
    </ItemGroup>

    <Copy SourceFiles="@(UnpackedSourceBuildReferencePackages)" DestinationFiles="$(ReferencePackagesDir)%(Filename)%(Extension)" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)UnpackTarballs.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <!-- Build the custom msbuild sdk resolver. -->
  <Target Name="BuildMSBuildSdkResolver"
          DependsOnTargets="UnpackTarballs"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)BuildMSBuildSdkResolver.complete">
    <MSBuild Projects="tasks\SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.csproj"
             Targets="Restore"
             Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid())" />

    <MSBuild Projects="tasks\SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.csproj"
             Targets="Build;InstallResolver" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)BuildMSBuildSdkResolver.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <!-- Build msbuild tasks. -->
  <Target Name="BuildXPlatTasks"
          DependsOnTargets="UnpackTarballs;BuildMSBuildSdkResolver"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)BuildXPlatTasks.complete">
    <MSBuild Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.XPlat\Microsoft.DotNet.SourceBuild.Tasks.XPlat.csproj"
             Targets="Restore"
             Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid())" />

    <MSBuild Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.XPlat\Microsoft.DotNet.SourceBuild.Tasks.XPlat.csproj"
             Targets="Build" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)BuildXPlatTasks.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <!-- Build msbuild tasks for the poisoning feature. -->
  <Target Name="BuildLeakDetection"
          DependsOnTargets="ExtractToolPackage;BuildMSBuildSdkResolver"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)BuildLeakDetection.complete"
          Condition="'$(EnablePoison)' == 'true'">
    <MSBuild Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.csproj"
             Targets="Restore"
             Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid())" />

    <MSBuild Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.csproj"
             Targets="Build" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)BuildLeakDetection.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="GenerateRootFs"
          Condition="'$(OS)' != 'Windows_NT'">
    <Exec Command="$(ArmEnvironmentVariables) $(RepoRoot)cross/build-rootfs.sh"
          Condition="$(Platform.Contains('arm')) AND '$(Platform)' != 'armel' AND '$(BuildArchitecture)' != 'arm64' AND '$(BuildArchitecture)' != 'arm'" />
    <Exec Command="$(ArmEnvironmentVariables) $(RepoRoot)cross/armel/tizen-build-rootfs.sh"
          Condition="'$(Platform)' == 'armel'" />
  </Target>

  <!-- Extract Arcade prebuilt package into the bootstrap folder and prepare it. -->
  <Target Name="ExtractToolPackage"
          Condition="'$(DotNetBuildFromSource)' == 'true'"
          DependsOnTargets="UnpackTarballs"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)ExtractToolPackage.complete">
    <Unzip SourceFiles="$(PrebuiltSourceBuiltPackagesPath)Microsoft.DotNet.Arcade.Sdk.$(ARCADE_BOOTSTRAP_VERSION).nupkg"
           DestinationFolder="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/"
           SkipUnchangedFiles="true" />

    <!-- When unpacking, this executable file has the wrong permissions on
         non-windows systems: https://github.com/NuGet/Home/issues/13121. -->
    <Exec Command="chmod 755 git-clone-to-dir.sh"
      WorkingDirectory="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/tools/SourceBuild/" />

    <!-- Allow overriding of Arcade targets for SourceBuild to enable quicker
         dev turnaround for Preview 6 -->
    <ItemGroup>
      <OverrideArcadeFiles Include="$(ArcadeOverridesDir)**/*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(OverrideArcadeFiles)"
      DestinationFiles="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/tools/SourceBuild/%(RecursiveDir)%(Filename)%(Extension)" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)ExtractToolPackage.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <UsingTask AssemblyFile="$(LeakDetectionTasksAssembly)" TaskName="MarkAndCatalogPackages" Condition="'$(EnablePoison)' == 'true'" />
  <Target Name="PoisonPrebuiltPackages"
          Condition="'$(EnablePoison)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)PoisonPrebuiltPackages.complete">
    <PropertyGroup>
      <SourceBuiltPoisonMarkerFile>.source-built.xml</SourceBuiltPoisonMarkerFile>
    </PropertyGroup>

    <ItemGroup>
      <PrebuiltPackages Include="$(PrebuiltPackagesPath)**/*.nupkg" />
      <PrebuiltSourceBuiltPackages Include="$(PrebuiltSourceBuiltPackagesPath)**/*.nupkg" />
    </ItemGroup>

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Poisoning existing packages for leak detection." />

    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltPackages)" CatalogOutputFilePath="$(PoisonReportDataFile)" MarkerFileName="$(PoisonMarkerFile)" />
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltSourceBuiltPackages)" CatalogOutputFilePath="$(SourceBuiltPoisonReportDataFile)" MarkerFileName="$(SourceBuiltPoisonMarkerFile)" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done poisoning." />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)PoisonPrebuiltPackages.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

</Project>
