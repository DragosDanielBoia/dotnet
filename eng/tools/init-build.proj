<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <BuildTasksOfflineSourcesProperty Condition="'$(DotNetBuildFromSource)' == 'true'">RestoreSources=$(ReferencePackagesDir)%3B$(PrebuiltPackagesPath)%3B$(PrebuiltSourceBuiltPackagesPath)</BuildTasksOfflineSourcesProperty>
  </PropertyGroup>

  <ItemGroup>
    <BuildTasksTarget Include="Restore;Build" />
  </ItemGroup>

  <Target Name="Build"
          DependsOnTargets="
      UnpackTarballs;
      BuildXPlatTasks;
      BuildLeakDetection;
      ExtractToolPackage;
      GenerateRootFs;
      PoisonPrebuiltPackages" />

  <Target Name="PrepareOfflineLocalTools"
          DependsOnTargets="
            ExtractToolPackage;
            BuildXPlatTasks" />

  <Target Name="Clean">
    <Delete Files="$(CompletedSemaphorePath)*.*" />
  </Target>

  <Target Name="UnpackTarballs"
          Condition="'$(DotNetBuildFromSource)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)UnpackTarballs.complete" >

    <MakeDir Directories="$(PrebuiltSourceBuiltPackagesPath)" Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />
    <Exec Command="tar -xzf $(ExternalTarballsDir)$(SourceBuiltArtifactsTarballName).*$(TarBallExtension)"
          WorkingDirectory="$(PrebuiltSourceBuiltPackagesPath)"
          Condition="'$(CustomPrebuiltSourceBuiltPackagesPath)' == ''" />

    <!--
      Check for a prebuilt dependency tarball and extract if exists. If there isn't one, we expect
      the build to be working without prebuilts.
    -->
    <ItemGroup>
      <SourceBuiltPrebuiltsTarballFile Include="$(ExternalTarballsDir)$(SourceBuiltPrebuiltsTarballName).*$(TarBallExtension)" />
    </ItemGroup>
    <Exec Command="tar -xzf %(SourceBuiltPrebuiltsTarballFile.FullPath)"
          WorkingDirectory="$(PrebuiltPackagesPath)"
          Condition="'@(SourceBuiltPrebuiltsTarballFile)' != ''" />

    <!-- Copy SBRP packages to reference packages location -->
    <MakeDir Directories="$(ReferencePackagesDir)" />
    <ItemGroup>
      <UnpackedSourceBuildReferencePackages Include="$(PrebuiltSourceBuiltPackagesPath)SourceBuildReferencePackages/*"/>
    </ItemGroup>

    <Copy SourceFiles="@(UnpackedSourceBuildReferencePackages)" DestinationFiles="$(ReferencePackagesDir)%(Filename)%(Extension)" />

    <Touch Files="$(CompletedSemaphorePath)UnpackTarballs.complete" AlwaysCreate="true" />
  </Target>

  <Target Name="BuildXPlatTasks"
          DependsOnTargets="UnpackTarballs"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)BuildXPlatTasks.complete">
    <MSBuild
      Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.XPlat\Microsoft.DotNet.SourceBuild.Tasks.XPlat.csproj"
      Targets="%(BuildTasksTarget.Identity)"
      Properties="
        $(BuildTasksOfflineSourcesProperty);
        __ToolInitPhase=%(BuildTasksTarget.Identity)" />

    <ItemGroup>
      <XPlatBuildTasksTarget Include="@(BuildTasksTarget)" />
      <XPlatBuildTasksTarget Include="InstallResolver" />
    </ItemGroup>

    <MSBuild
      Projects="tasks\SourceBuild.MSBuildSdkResolver\SourceBuild.MSBuildSdkResolver.csproj"
      Targets="%(XPlatBuildTasksTarget.Identity)"
      Properties="
        $(BuildTasksOfflineSourcesProperty);
        __ToolInitPhase=%(XPlatBuildTasksTarget.Identity)" />

    <Touch Files="$(CompletedSemaphorePath)BuildXPlatTasks.complete" AlwaysCreate="true" />
  </Target>

  <Target Name="BuildLeakDetection"
          DependsOnTargets="ExtractToolPackage"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)BuildLeakDetection.complete"
          Condition="'$(EnablePoison)' == 'true'">

    <MSBuild
      Projects="tasks\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.csproj"
      Targets="%(BuildTasksTarget.Identity)"
      Properties="
        $(BuildTasksOfflineSourcesProperty);
        __ToolInitPhase=%(BuildTasksTarget.Identity)" />

    <Touch Files="$(CompletedSemaphorePath)BuildLeakDetection.complete" AlwaysCreate="true" />
  </Target>

  <Target Name="GenerateRootFs" Condition="'$(OS)' != 'Windows_NT'">
     <Exec Condition="$(Platform.Contains('arm')) AND '$(Platform)' != 'armel' AND '$(BuildArchitecture)' != 'arm64' AND '$(BuildArchitecture)' != 'arm'" Command="$(ArmEnvironmentVariables) $(RepoRoot)cross/build-rootfs.sh" />
     <Exec Condition="'$(Platform)' == 'armel'" Command="$(ArmEnvironmentVariables) $(RepoRoot)cross/armel/tizen-build-rootfs.sh" />
  </Target>

  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="ZipFileExtractToDirectory" />
  <UsingTask AssemblyFile="$(XPlatSourceBuildTasksAssembly)" TaskName="ReplaceTextInFile" />
  <Target Name="ExtractToolPackage"
          Condition="'$(DotNetBuildFromSource)' == 'true'"
          DependsOnTargets="UnpackTarballs;BuildXPlatTasks"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)ExtractToolPackage.complete">
    <ZipFileExtractToDirectory SourceArchive="$(PrebuiltSourceBuiltPackagesPath)Microsoft.DotNet.Arcade.Sdk.$(ARCADE_BOOTSTRAP_VERSION).nupkg"
                               DestinationDirectory="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/"
                               OverwriteDestination="true" />

    <!-- When unpacking using ZipFileExtractToDirectory, this executable file has the wrong permissions. -->
    <Exec Command="chmod 755 git-clone-to-dir.sh"
      WorkingDirectory="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/tools/SourceBuild/" />

    <ReplaceTextInFile InputFile="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/tools/SourceBuild/SourceBuildArcadeTools.targets"
      OldText="%3CReadSourceBuildIntermediateNupkgDependencies"
      NewText="%3CReadSourceBuildIntermediateNupkgDependencies Condition=&quot;'%24%28DotNetBuildOffline%29' != 'true'&quot;" />

    <!-- Allow overriding of Arcade targets for SourceBuild to enable quicker
         dev turnaround for Preview 6 -->
    <ItemGroup>
      <OverrideArcadeFiles Include="$(ArcadeOverridesDir)**/*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(OverrideArcadeFiles)"
      DestinationFiles="$(ArcadeBootstrapPackageDir)microsoft.dotnet.arcade.sdk/$(ARCADE_BOOTSTRAP_VERSION)/tools/SourceBuild/%(RecursiveDir)%(Filename)%(Extension)" />

    <Touch Files="$(CompletedSemaphorePath)ExtractToolPackage.complete" AlwaysCreate="true" />
  </Target>

  <UsingTask AssemblyFile="$(LeakDetectionTasksAssembly)" TaskName="MarkAndCatalogPackages" Condition="'$(EnablePoison)' == 'true'" />
  <Target Name="PoisonPrebuiltPackages"
          Condition="'$(EnablePoison)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(CompletedSemaphorePath)PoisonPrebuiltPackages.complete">
    <ItemGroup>
      <PrebuiltPackages Include="$(PrebuiltPackagesPath)**/*.nupkg" />
      <PrebuiltSourceBuiltPackages Include="$(PrebuiltSourceBuiltPackagesPath)**/*.nupkg" />
    </ItemGroup>

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Poisoning existing packages for leak detection." />

    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltPackages)" CatalogOutputFilePath="$(PoisonReportDataFile)" MarkerFileName="$(PoisonMarkerFile)" />
    <MarkAndCatalogPackages PackagesToMark="@(PrebuiltSourceBuiltPackages)" CatalogOutputFilePath="$(SourceBuiltPoisonReportDataFile)" MarkerFileName="$(SourceBuiltPoisonMarkerFile)" />

    <Touch Files="$(CompletedSemaphorePath)PoisonPrebuiltPackages.complete" AlwaysCreate="true" />
    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done poisoning." />
  </Target>

</Project>
